// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Patients = sequelize.define('patients', {
    firstName: {
      type: DataTypes.STRING,
      field: 'firstName',
    },
    lastName: {
      type: DataTypes.STRING,
      field: 'lastName',
    },
    dateOfBirth: {
      type: DataTypes.DATEONLY,
      field: 'DateOfBirth',
    },
    email: {
      type: DataTypes.STRING,
    },
    documents: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
      field: 'City',
    },
    coutry: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATEONLY,
    },
  }, {
    tableName: 'Patients',
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Patients.associate = (models) => {
    Patients.hasMany(models.documents, {
      foreignKey: {
        name: 'patientIdKey',
        field: 'PatientId',
      },
      as: 'patientDocuments',
    });
    Patients.hasMany(models.prescriptions, {
      foreignKey: {
        name: 'patientsIdKey',
        field: 'patientsId',
      },
      as: 'patientsPrescriptions',
    });
  };

  return Patients;
};
